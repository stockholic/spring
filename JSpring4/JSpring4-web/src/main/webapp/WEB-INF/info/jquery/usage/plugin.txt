<script>

파일명을 jquery.[플러그인명].js 로 짓도록 합니다. 예 : jquery.debug.js

모든 새로운 메소드는 jQuery.fn 개체에 종속되도록 하고, 모든 함수는 jQuery 개체에 종속되게 합니다.

메소드 내에서 'this' 인스턴스는 현재 jQuery 개체를 가리킵니다.

새로 덧붙인 모든 메소드와 함수는 반드시 세미콜론(;)으로 끝나야 합니다 - 그렇지 않으면 파일을 압축할 때 코드가 깨지기 때문입니다.

메소드는 특별히 명시된 상황이 아닌 한 반드시 jQuery 개체를 반환해야 합니다

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Query.fn 객체에 새로운 function property를 추가해 jQuery 플러그인 작성을 시작합니다. property의 이름은 여러분이 작성할 플러그인의 이름이 될 것입니다.


jQuery.fn.myPlugin = function() {
 
  // 여러분의 플러그인이 들어갈 자리입니다.
 
};



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

잠시 기다리세요! 내가 사랑하는 $ 는 어디에 있는거죠? $ 는 여전히 있으나 여러분의 플러그인이 $ 를 사용하는 다른 라이브러리와 충돌하지 않게 하기 위한 방법으로
jQuery 자체를 closure로 감싸 다른 라이브러리에서 쓰이는 $ 들과 중복되지 않게 합니다.

(function( $ ){
  $.fn.myPlugin = function() {
 
    // 여러분의 플러그인이 들어갈 자리입니다.
 
  };
})( jQuery );

좀더 낫군요. 이제 우리는 closure 안에서 우리가 원하는대로 jQuery 대신 $를 사용할 수 있습니다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Context

이제 여러분은 플러그인의 껍질을 작성했고 실제 플러그인 코드를 작성할 수 있습니다. 하지만 그 전에 context 라는 단어에 대해 언급해야겠습니다.
this 키워드는 플러그인 함수의 범위 내에서 플러그인에서 호출된 jQuery 객체를 참조합니다. 이것은 jQuery가 callback 받는 다른 경우에 저지르는 일반적인 실수입니다.
this 키워드는 원래 DOM 요소를 참조합니다. 이것은 종종 개발자들이 jQuery 함수 안에서 this 키워드에 불필요한 wrapping을 하게 만듭니다.

(function( $ ){
 
  $.fn.myPlugin = function() {
 
    // 여기서는 $(this) 할 필요가 없습니다. 왜냐하면
    // "this" 는 이미 jQuery 객체이기 때문입니다.
 
    // $(this) 는 $($('#element')); 와 같습니다.
 
    this.fadeIn('normal', function(){
 
      // 여기에서 this 키워드는 DOM 엘리먼트 입니다.
 
    });
 
  };
})( jQuery );

$('#element').myPlugin();

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

기본사항

이제 여러분은 jQuery 플러그인의 context를 이해했습니다. 실제 플러그인을 작성해봅시다.

(function( $ ){
 
  $.fn.maxHeight = function() {
 
    var max = 0;
 
    this.each(function() {
      max = Math.max( max, $(this).height() );
    });
 
    return max;
  };
})( jQuery );
var tallest = $('div').maxHeight(); // 가장 긴 높이를 가진 div의 height값을 리턴합니다.
이 간단한 플러그인은 .height() 함수를 이용해 페이지 내에서 가장 큰 height 값을 리턴해줍니다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

체이닝 기능 유지

전의 예제에서는 페이지에서 가장 큰 height 를 가진 div의 height값을 리턴해주었으나, 
보통의 플러그인은 간단한 방법으로 element의 collection을 변경하고 chain의 다음 메소드로 element의 collection을 전달해주는 것입니다.

이것이 jQuery 디자인의 미이고 jQuery가 인기있는 이유 중 하나입니다. 그렇기 때문에 플러그인의 체이닝 기능을 유지하기 위해 여러분은 여러분의 플러그인이 this 키워드를 리턴하도록 만들어야 합니다.

(function( $ ){
 
  $.fn.lockDimensions = function( type ) {  
 
    return this.each(function() {
 
      var $this = $(this);
 
      if ( !type || type == 'width' ) {
        $this.width( $this.width() );
      }
 
      if ( !type || type == 'height' ) {
        $this.height( $this.height() );
      }
 
    });
 
  };
})( jQuery );

$('div').lockDimensions('width').css('color', 'red');

플러그인이 플러그인 범위 내에서 this 키워드를 리턴해주기 때문에 체이닝 기능을 유지하고 jQuery collection이 계속 .css와 같은 jQuery 메소드를 통해 조작할 수 있습니다. 
그래서 여러분의 플러그인이 어떤 특정 값을 리턴해주지 않는다면, 여러분은 항상 this 키워드를 플러그인 함수 범위 내에서 리턴해주어야 합니다. 
또한 짐작한바와 같이, 플러그인에 들어간 인수들이 범위 안의 플러그인 함수에 쓰일 수 있습니다. 그래서 전의 예제에서, ‘width’라는 문자열은 플러그인 함수의 type 인수가 되었습니다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

디폴트와 옵션

더 복잡하고 더 맞춤형인 플러그인을 위해서 많은 옵션들을 제공합니다. 
이것은 플러그인이 호출되었을 때 확장할 수 있는($.extend를 이요애서) 기본 세팅을 가진 예제입니다. 
그래서 많은 숫자의 인수를 가진 플러그인을 호출하는 대신, 여러분은 여러분이 바꾸고 싶은 인수 하나와 함께 호출할 수 있습니다. 여기 그 방법이 있습니다.

(function( $ ){
 
  $.fn.tooltip = function( options ) {  
 
    var settings = {
      'location'         : 'top',
      'background-color' : 'blue'
    };
 
    return this.each(function() {        
      // 옵션이 존재하면
      // 여러분의 기본세팅과 병합합니다.
      if ( options ) { 
        $.extend( settings, options );
      }
 
      // 툴팁 플러그인 코드가 여기에 들어갑니다.
 
    });
 
  };
})( jQuery );
$('div').tooltip({
  'location' : 'left'
});

이 예제에서 주어진 옵션으로 툴팁 플러그인이 호출 된 이후에 backgrond-color 세팅이 기본 ‘blue’로 남아있는 동안 기본 위치 세팅은 ‘left’로 재설정 되었습니다.
그래서 최종 세팅은 아래와 같습니다:

{
  'location'         : 'left',
  'background-color' : 'blue'
}

이 방법은 개발자가 모든 이용 가능한 옵션들을 요구할 필요 없이 고도로 설정된 플러그인을 제공할 수 있는 방법입니다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

플러그인 메소드

하나의 플러그인이 jQuery.fn 객체안의 하나 이상의 네임스페이스를 가지는 상황은 피해야합니다.

(function( $ ){
 
  $.fn.tooltip = function( options ) { // 이것은 };
  $.fn.tooltipShow = function( ) { // 나쁜   };
  $.fn.tooltipHide = function( ) { // 예제입니다  };
  $.fn.tooltipUpdate = function( content ) { // !!!  };
 
})( jQuery );


$.fn 네임스페이스를 어수선하게 채우기 때문에 좋지 않습니다. 
이 문제를 해결하기 위해서, 여러분은 객체 literal 안의 여러분의 플러그인의 모든 메소드를 수집해야하고 플러그인에 문자열 이름을 전달해 그들을 호출해야 합니다.

(function( $ ){
 
  var methods = {
    init : function( options ) { // 이것은 },
    show : function( ) { // 좋은   },
    hide : function( ) { // 예제 },
    update : function( content ) { // !!! }
  };
 
  $.fn.tooltip = function( method ) {
 
    // 메소드가 불리는 로직
    if ( methods[method] ) {
      return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
    } else if ( typeof method === 'object' || ! method ) {
      return methods.init.apply( this, arguments );
    } else {
      $.error( 'Method '    method   ' does not exist on jQuery.tooltip' );
    }    
 
  };
 
})( jQuery );

$('div').tooltip(); // 초기화 메소드를 호출
$('div').tooltip({  // 초기화 메소드를 호출
  foo : 'bar'
});

$('div').tooltip('hide'); // calls the hide method
$('div').tooltip('update'); 'This is the new tooltip content!'); // update 메소드 호출

이러한 타입의 플러그인 설계는 여러분에게 여러분의 플러그인의 parent closure 안의 모든 메소드를 encaptsulate 하고,
먼저 메소드의 문자열 이름을 통과시켜 호출 한 후 여러분이 필요로 하는 메소드의 추가적인 매개변수들을 입력합니다. 

이런 타입의 메소드 encapsulation 과 설계는 jQuery 플러그인 커뮤니티에서 표준이고 수많은 플러그인들 뿐만 아니라 jQueryUI의 위젯에서 쓰이고 있습니다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

이벤트

바인드 메소드의 덜 알려진 특징은 바운드 이벤트의 네임스페이싱을 허용한다는 것입니다. 
만약 여러분의 플러그인이 이벤트를 바인드 한다면, 이벤트를 네임스페이스 하는데 좋은 예제가 될 것입니다. 만약 여러분이 후에 바인딩을 해제해야 하는 경우, 
여러분은 동일한 유형의 다른 이벤트들을 방해하지 않고 수행할 수 있습니다. 여러분은 여러분의 이벤트를 여러분이 바인딩할 타입의 “<네임스페이스>” 에 덧붙일 수 있습니다.

(function( $ ){
 
  var methods = {
     init : function( options ) {
 
       return this.each(function(){
         $(window).bind('resize.tooltip', methods.reposition);
       });
 
     },
     destroy : function( ) {
 
       return this.each(function(){
         $(window).unbind('.tooltip');
       })
 
     },
     reposition : function( ) { // ... },
     show : function( ) { // ... },
     hide : function( ) { // ... },
     update : function( content ) { // ...}
  };
 
  $.fn.tooltip = function( method ) {
 
    if ( methods[method] ) {
      return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
    } else if ( typeof method === 'object' || ! method ) {
      return methods.init.apply( this, arguments );
    } else {
      $.error( 'Method '    method   ' does not exist on jQuery.tooltip' );
    }    
 
  };
 
})( jQuery );

$('#fun').tooltip();
// Some time later...
$('#fun').tooltip('destroy');
이 예제에서 툴팁이 초기화 메소드와 함께 초기화 되었을 때, reposition 메소드를 ‘tooltip’ 네임스페이스 아래의 윈도우 리사이즈 이벤트에 바인드 시켰습니다. 
만약 나중에 개발자가 툴팁을 없애야 할 때, 여러분은 네임스페이스를 이용하여 바인드를 해제할 수 있는데 ‘tooltip’ 의 경우에는 unbind 메소드를 통해 해제할 수 있습니다. 
이 기능은 여러분에게 뜻하지않는 바인드 해제 이벤트 없이 플러그인 밖에서 안전하게 바인드를 해제할 수 있게 허용합니다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

요약 및 우수사례

jQuery 플러그인을 작성하는 것은 여러분에게 라이브러리를 최대한 활용할 수 있게 하고 추상화된 똑똑하고 유용한 함수들을 재사용함으로써 시간을 절약할 수 있으며 개발을 더욱 효율적으로 할 수 있게 만들어줍니다. 여러분이 다음 jQuery 플러그인을 개발할 때 염두해 두고 있어야 하는 것의 요약은 다음과 같습니다:

항상 여러분의 플러그인을

(function($){
 
})(jQuery)

안에 감싸세요.
여러분의 플러그인 함수 범위에서 this 키워드를 중복해서 감싸지 마세요.
여러분의 플러그인으로부터 특정한 값이 리턴되지 않는다면 항상 여러분의 플러그인 함수가 this 키워드를 리턴하여 체이닝 기능을 유지하게 하세요.
너무 긴 인수를 요구하는 것 보다 여러분의 플러그인의 기본에서 확장할 수 있는 플러그인 셋팅을 사용하세요.
jQuery.fn 객체를 한 플러그인에 여러 네임스페이스를 채우지 마세요.
여러분의 메소드나 이벤트, 데이터를 항상 네임스페이스 하세요.
jQuery.fn 은 jQuery effin’ 으로 선언되었습니다.

</script>

