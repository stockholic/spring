
 test 로 시작하는 메서드 이름으로 작성한다.
즉, createMethod() 라는 메서드를 테스트 하려면 testCreateMethod()로 만드는 것이 좋다.
그리고 eclipse의 junit 플러그인은 test로 시작된 메서드들을 찾아서 리플렉션을 통해서 테스트를 수행하게 한다.


*assertEquals	- 같은지 비교
*assertNull		- null값을 리턴하는지 비교
*assertNotNull	- 인자로 넘겨받은 객체가 null인지 판정하고 반대인경우 실패로 처리한다.
*assertSame	- assertSame 은 expected 와 actual이 같은 객체를 참조하는지 판정하고 그렇지 않다면 실패로 처리한다.
*assertNotSame	- expected 와 actual이 서로 '다른' 객체를 참조하는지 판정하고, 만약 같은 객체를 참조한다면 실패로 처리한다.
*assertTrue		- boolean 조건이 참인지 판정한다. 만약 조건이 거짓이라면 실패로 처리한다.

		*assertTrue		가 여기저기 들어가 있거나
		테스트 코드라고 작성한 코드라고 주욱 작성해 놓고 마지막에 이 한줄을 넣어두는 코드는 의미가 없다.
		*fail - 테스트를 바로 실패 처리한다.


•이 assert 메서드들은 테스트 대상이 되는 메서드의 검증을 위해 테스트 메서드 하나에는 assert 메서드가 여러개 들어간다.
assert 메서드가 하나라도 실패하면 테스트 메서드는 중단되고, 나머지 assert 메서드들은 실행되지 않는다.
 





•JUnit프레임워크 
	1.import문으로 junit클래스들을 참조
	2.테스트를 포함한 클래스는 모두 TestCase를 상속해야 한다.
	3.테스트 클래스는 각 test.... 메서드를 정의한다.
	4.모든 test..... 메서드는 Junit에 의해 자동으로 실행된다.

•Junit 테스트 조합 
	•test suite가 이것을 가능하게 하는데 모든 테스트 클래스는 suite라는 이름의 정적 메서드를 가질 수 있다.
	•public static Test suite();
	•원하는 테스트 묶음을 반환하는 suite() 메서드를 작성하면 된다.
	 ( 이 suite() 메서드가 없으면 JUnit은 모든 test.... 메서드를 자동으로 실행한다. )


•테스트별 준비 설정과 정리 
	•setUp() 메서드는 각 test..... 메서드들이 실행되기전에 호출된다.
	•tearDown() 메서드는 각각의 테스트 메서드들이 실행되고 난 다음에 호출된다. 

	테스트 클래스에 public void setUp() 메소드를 만들어주면 각 테스트 메소드가 실행되기 전에 먼저 setUp() 메소드가 실행된다.
	테스트 클래스에 public void tearDown() 메소드를 만들어주면 각 테스트 메소드가 종료할 때마다 tearDown() 메소드가 실행된다

	예를들어, 테스트마다 db연결 객체가 필요하다고 가정할때,
	데이터베이스에 연결하고 접속을 종료하는 코드를 각 테스트 메서드에 일일이 넣을 필요 없이
	setUp()과 tearDown() 메서드를 이용하여 해결하면 될것이다.

	public Class TestDb extends TestCase(){
		private Connection dbConn;
		protected void setUp(){
			dbConn = new Connection( "oracle", 1521, "scott", "tiger");
			dbConn.connect();
		}
		protected void tearDown(){
			dbConn.disconnect();
			dbConn = null;
		}
		public void testEmpAccess(){
			//dbConn 사용
			어쩌고 저쩌고....
		}
		public void testDeptAccess(){
			//dbConn 사용
			어쩌고 저쩌고....
		}
	}

	•이 간단한 예제에서는 setUp이 호출된 다음에 testEmpAccess() 가 호출이 되고 tearDown() 이 호출된다.
	•그리고 setUp() 이 다시 호출되고 testEmpAccess() 가 실행되고 난 후에 tearDown()이 다시 호출된다.


